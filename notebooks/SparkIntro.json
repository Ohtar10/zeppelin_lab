{"paragraphs":[{"text":"%md\n\n## Apache Spark\nSpark es un motor de procesamiento de datos distribuidos basado en Java Virtual Machine (JVM) que escala, y es rápido en comparación con muchos otros frameworks de procesamiento de datos. Spark se originó en la Universidad de California en Berkeley y luego se convirtió en uno de los mejores proyectos en Apache.  \n\nEl mayor avance de Spark es con respecto a la velocidad,  Spark puede ser tan veloz debido a que realiza el procesamiento en la memoria principal de los nodos del Worker y evita las operaciones de E / S innecesarias con los discos. La otra ventaja que ofrece Spark, es la capacidad de encadenar las tareas incluso a nivel de programación de aplicaciones sin escribir en absoluto en los discos y asi minimizar el número de escrituras en los discos.\n\n¿Cómo se volvió Spark tan eficiente en el procesamiento de datos? Viene con un motor de procesamiento de datos Directed Acyclic Graph (DAG) muy avanzado. Lo que significa que para cada trabajo de Spark, se crea un DAG de tareas para ser ejecutado por el motor. El DAG en lenguaje matemático consiste en un conjunto de vértices y aristas dirigidas que los conectan. Las tareas se ejecutan según el diseño del DAG. El procesamiento de datos en memoria combinado con su motor de procesamiento de datos basado en DAG hace que Spark sea muy eficiente.El DAG de tareas puede ser tan complicado como sea posible. \n\n![alt text](https://sigmoid.com/wp-content/uploads/2015/03/DAG-Execution.png \"\")\n\n## Arquitectura de Spark\n\nEl paradigma de programación Spark es muy poderoso y expone un modelo de programación uniforme que respalda el desarrollo de aplicaciones en múltiples lenguajes de programación. Spark admite programación en Scala, Java, Python y R.\n\n| Libreria       | Uso                                                                                       | Lenguajes soportados       |\n|----------------|-------------------------------------------------------------------------------------------|----------------------------|\n| Spark SQL      | Permite el uso de sentencias SQL o API DataFrame dentro de aplicaciones Spark             | Scala, Java, Python, and R |\n| SparkStreaming | Permite el procesamiento de live data streams                                             | Scala, Java, and Python    |\n| Spark MLlib    | Permite el desarrollo de aplicaciones de machine learning                                 | Scala, Java, Python, and R |\n| Spark GraphX   | Permite el procesamiento de gráficos y ofrece una librería de algoritmos de gráficos | Scala                      |\n\n\n\n![alt text](https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAsfAAAAJDU4OWVlODBmLTE1MTAtNDc4NC1iZTUyLTNjZWUxNmIzZGMyOQ.jpg \"\")\n\nRDDs the resilient distributed data sets. Es realmente una representación de los datos que ingresan en su sistema en un formato de objeto y le permite hacer cálculos sobre ellos. Los RDD son resilientes porque si hay una falla en el sistema, pueden recalcularse utilizando la información previa.\n\nTransformaciones: Es lo que haces con los RDDs para obtener otros RDDs. Ejemplos de transformaciones serían: Map, filter, etc.\n\nAcciones: Son procesamientos que  representan una respuesta real que el sistema esta dando a un usuario, ejemplos de estos son : reduce, count, save.\n\nRDD es la API principal en Spark desde su creación. En esencia, un RDD es una colección distribuida inmutable de elementos de sus datos, divididos en nodos en su clúster que pueden procesar en paralelo con un API de bajo nivel que ofrece transformaciones y acciones.\n\n#### Dataframe\n\nAl igual que un RDD, un DataFrame es una colección de datos distribuida e inmutable. A diferencia de un RDD, los datos se organizan en columnas con nombre, como una tabla en una base de datos relacional. Diseñado para hacer aún más fácil el procesamiento de grandes conjuntos de datos, El DataFrame permite a los desarrolladores imponer una estructura en una colección distribuida de datos, lo que permite una abstracción de mayor nivel; proporciona una API de lenguaje específico de dominio para manipular sus datos distribuidos; y hace que Spark sea accesible para un público más amplio, más allá de los ingenieros de datos especializados\n\n\n\n\n\n\n\n![alt text](https://cdn-images-1.medium.com/max/1600/1*8QmTCymqHPOrsPv9A8S4OQ.png \"\")\n","user":"user2","dateUpdated":"2017-12-04T22:30:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Apache Spark</h2>\n<p>Spark es un motor de procesamiento de datos distribuidos basado en Java Virtual Machine (JVM) que escala, y es rápido en comparación con muchos otros frameworks de procesamiento de datos. Spark se originó en la Universidad de California en Berkeley y luego se convirtió en uno de los mejores proyectos en Apache. </p>\n<p>El mayor avance de Spark es con respecto a la velocidad, Spark puede ser tan veloz debido a que realiza el procesamiento en la memoria principal de los nodos del Worker y evita las operaciones de E / S innecesarias con los discos. La otra ventaja que ofrece Spark, es la capacidad de encadenar las tareas incluso a nivel de programación de aplicaciones sin escribir en absoluto en los discos y asi minimizar el número de escrituras en los discos.</p>\n<p>¿Cómo se volvió Spark tan eficiente en el procesamiento de datos? Viene con un motor de procesamiento de datos Directed Acyclic Graph (DAG) muy avanzado. Lo que significa que para cada trabajo de Spark, se crea un DAG de tareas para ser ejecutado por el motor. El DAG en lenguaje matemático consiste en un conjunto de vértices y aristas dirigidas que los conectan. Las tareas se ejecutan según el diseño del DAG. El procesamiento de datos en memoria combinado con su motor de procesamiento de datos basado en DAG hace que Spark sea muy eficiente.El DAG de tareas puede ser tan complicado como sea posible. </p>\n<p><img src=\"https://sigmoid.com/wp-content/uploads/2015/03/DAG-Execution.png\" alt=\"alt text\" /></p>\n<h2>Arquitectura de Spark</h2>\n<p>El paradigma de programación Spark es muy poderoso y expone un modelo de programación uniforme que respalda el desarrollo de aplicaciones en múltiples lenguajes de programación. Spark admite programación en Scala, Java, Python y R.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Libreria </th>\n      <th>Uso </th>\n      <th>Lenguajes soportados </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Spark SQL </td>\n      <td>Permite el uso de sentencias SQL o API DataFrame dentro de aplicaciones Spark </td>\n      <td>Scala, Java, Python, and R </td>\n    </tr>\n    <tr>\n      <td>SparkStreaming </td>\n      <td>Permite el procesamiento de live data streams </td>\n      <td>Scala, Java, and Python </td>\n    </tr>\n    <tr>\n      <td>Spark MLlib </td>\n      <td>Permite el desarrollo de aplicaciones de machine learning </td>\n      <td>Scala, Java, Python, and R </td>\n    </tr>\n    <tr>\n      <td>Spark GraphX </td>\n      <td>Permite el procesamiento de gráficos y ofrece una librería de algoritmos de gráficos </td>\n      <td>Scala </td>\n    </tr>\n  </tbody>\n</table>\n<p><img src=\"https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAsfAAAAJDU4OWVlODBmLTE1MTAtNDc4NC1iZTUyLTNjZWUxNmIzZGMyOQ.jpg\" alt=\"alt text\" /></p>\n<p>RDDs the resilient distributed data sets. Es realmente una representación de los datos que ingresan en su sistema en un formato de objeto y le permite hacer cálculos sobre ellos. Los RDD son resilientes porque si hay una falla en el sistema, pueden recalcularse utilizando la información previa.</p>\n<p>Transformaciones: Es lo que haces con los RDDs para obtener otros RDDs. Ejemplos de transformaciones serían: Map, filter, etc.</p>\n<p>Acciones: Son procesamientos que representan una respuesta real que el sistema esta dando a un usuario, ejemplos de estos son : reduce, count, save.</p>\n<p>RDD es la API principal en Spark desde su creación. En esencia, un RDD es una colección distribuida inmutable de elementos de sus datos, divididos en nodos en su clúster que pueden procesar en paralelo con un API de bajo nivel que ofrece transformaciones y acciones.</p>\n<h4>Dataframe</h4>\n<p>Al igual que un RDD, un DataFrame es una colección de datos distribuida e inmutable. A diferencia de un RDD, los datos se organizan en columnas con nombre, como una tabla en una base de datos relacional. Diseñado para hacer aún más fácil el procesamiento de grandes conjuntos de datos, El DataFrame permite a los desarrolladores imponer una estructura en una colección distribuida de datos, lo que permite una abstracción de mayor nivel; proporciona una API de lenguaje específico de dominio para manipular sus datos distribuidos; y hace que Spark sea accesible para un público más amplio, más allá de los ingenieros de datos especializados</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*8QmTCymqHPOrsPv9A8S4OQ.png\" alt=\"alt text\" /></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1511815616788_509179603","id":"20171127-151124_882949168","dateCreated":"2017-11-27T20:46:56+0000","dateStarted":"2017-12-04T22:30:56+0000","dateFinished":"2017-12-04T22:30:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8342"},{"text":"%md\n","user":"user2","dateUpdated":"2017-12-04T22:30:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1511815616789_508794855","id":"20171127-154326_825668353","dateCreated":"2017-11-27T20:46:56+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:8343"}],"name":"2. SparkIntro","id":"2CY73YQ5J","angularObjects":{"2D3CCCP57:shared_process":[],"2D1P711CG:shared_process":[],"2D3ES4SAJ:shared_process":[],"2D1MXXKMC:shared_process":[],"2D2F38SC4:shared_process":[],"2D3EA879F:shared_process":[],"2D2YTUFWW:shared_process":[],"2D37ZZ736:shared_process":[],"2D3B188ME:shared_process":[],"2CZAM9P8A:shared_process":[],"2D2N9MMNQ:shared_process":[],"2CZDQA3PT:shared_process":[],"2D15K8XWF:shared_process":[],"2D2C1TPE2:shared_process":[],"2D1X2RCQ6:shared_process":[],"2CYWZQ9Y6:shared_process":[],"2CZKG5F1W:shared_process":[],"2CZSRMQXZ:shared_process":[],"2CZNC7VMY:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}